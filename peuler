#!/usr/bin/perl
#version 0.41

use strict;
use warnings;
use Cwd 'abs_path';

if($#ARGV != 1) {
    die "Wrong number of arguments\n";
}

my $lang = $ARGV[0];
my $num  = $ARGV[1];

my %lang_ext = (
    'c' => '.c',
    'cpp' => '.cpp',
    'csharp' => '.cs',
    'java' => '.java',
    'js' => '.js',
    'lua' => '.lua',
    'perl' => '.pl',
    'php' => '.php',
    'python' => '.py',
    'ruby' => '.rb',
);

my %lang_name = (
    'c' => 'problem',
    'cpp' => 'problem',
    'csharp' => 'Problem',
    'java' => 'Problem',
    'js' => 'problem',
    'lua' => 'problem',
    'perl' => 'problem',
    'php' => 'problem',
    'python' => 'problem',
    'ruby' => 'problem',
);

if(!defined($lang_ext{$lang})) {
    die "Unknown language\n";
}

if($num !~ m/^\d+$/) {
    die "$num is not a number\n";
}

my $file = $lang_name{$lang} . $num . $lang_ext{$lang};

if(-e abs_path($file)) {
    die "file for that problem already exists\n";
}

my %lang_sub = (
    'c' => \&c_stub,
    'cpp' => \&cpp_stub,
    'csharp' => \&csharp_stub,
    'java' => \&java_stub,
    'js' => \&js_stub,
    'lua' => \&lua_stub,
    'perl' => \&perl_stub,
    'php' => \&php_stub,
    'python' => \&python_stub,
    'ruby' => \&ruby_stub,
);

open(my $fh, '>', $file) or die "could not open file $file for writing\n";

print $fh $lang_sub{$lang}($num);

print "created stub ", $lang_name{$lang}, $num, $lang_ext{$lang}, "\n";

close($fh);

sub c_stub {
    my ($num) = @_;
    
    return "#include <stdio.h>\n//solution: \n\nint euler_problem_".$num."() {\n    \n}\n\nint main() {\n    printf(\"%d\\n\", euler_problem_".$num."());\n    return 0;\n}\n\n";
}

sub cpp_stub {
    my ($num) = @_;
    
    return "#include <iostream>\n//solution: \n\nint eulerProblem".$num."() {\n    \n}\n\nint main() {\n    cout << eulerProblem".$num."() << endl;\n    return 0;\n}\n";
}

sub csharp_stub {
    my ($num) = @_;
    
    return "//solution: \npublic class Problem".$num." {\n\n    public static int EulerProblem".$num."() {\n    \n    }\n\n    public static void Main() {\n        System.Console.WriteLine(EulerProblem".$num."());\n    }\n\n}\n";
}

sub java_stub {
    my ($num) = @_;
    
    return "//solution: \npublic class Problem".$num." {\n\n    public int eulerProblem".$num."() {\n        \n    }\n\n    public static void main(String args[]) {\n        System.out.println((new Problem".$num."()).eulerProblem".$num."());\n    }\n\n}\n";
}

sub js_stub {
    my ($num) = @_;
    
    return "//solution: \nprint(eulerProblem".$num."());\n\nfunction eulerProblem".$num."() {\n    \n}\n";
}

sub lua_stub {
    my ($num) = @_;
    
    return "--solution: \n\nfunction euler_problem_".$num."()\n    return\nend\n\nprint(euler_problem_".$num."())\n";
}

sub perl_stub {
    my ($num) = @_;
    
    return "#!/usr/bin/perl\n#solution: \nuse strict;\nuse warnings;\n\nprint euler_problem_".$num."(), \"\\n\";\n\nsub euler_problem_".$num." {\n    \n}\n";
}

sub php_stub {
    my ($num) = @_;
    
    return "<?php\n//solution: \necho eulerProblem".$num."() . \"\\n\";\n\nfunction eulerProblem".$num."() {\n    \n}\n\n?>";
}

sub python_stub {
    my ($num) = @_;
    
    return "#!/usr/bin/python\n#solution: \n\ndef euler_problem_".$num."():\n    return\n\nprint euler_problem_".$num."()\n";
}

sub ruby_stub {
    my ($num) = @_;
    
    return "#!/usr/bin/ruby\n#solution: \n\ndef euler_problem_".$num."()\n    \nend\n\nputs euler_problem_".$num."()\n";
}
